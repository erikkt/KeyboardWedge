
// NFC Tools works good for entering passwords on chip. It's advisable to enter the password as the first NDEF record, 
// if you have more than one record. This increase the chance of finding the password on first try. 
// On ESP32, use GPIO 21 for SDA and GPIO 22 for SCL.
// Keep in mind some special characters, like â‚¬, does not seem to be printed correctly with BLEKeyboard.
// It's advisable to add 3.3 kOhm pullups to SDA and SCL lines, due to weak internal ones. 

#include <Wire.h>
#include <PN532_I2C.h>
#include <PN532.h>
#include <NfcAdapter.h>
#include <BleKeyboard.h>
#define LEDPIN 23

BleKeyboard bleKeyboard("ESP32 Wedge");
PN532_I2C pn532_i2c(Wire);
NfcAdapter nfc = NfcAdapter(pn532_i2c);


String header = "ZPKW";
String terminator = "$";

void blink() {
  for (uint8_t b = 0; b < 6 ; b ++)
  {
    digitalWrite(LEDPIN, LOW);
    delay(80);
    digitalWrite(LEDPIN, HIGH);
    delay(80);
  }
}

void setup(void) {
  Serial.begin(115200);
  Serial.println("NDEF Reader");
  nfc.begin();
  bleKeyboard.begin();
  pinMode(LEDPIN, OUTPUT);
}

void loop(void) {
  if(bleKeyboard.isConnected()) {
    digitalWrite(LEDPIN, HIGH);
  }
  else 
  {
    digitalWrite(LEDPIN, LOW); 
  }

  if (nfc.tagPresent())
  {
    NfcTag tag = nfc.read();
    Serial.println(tag.getTagType());
    Serial.print("UID: ");Serial.println(tag.getUidString());

    if (tag.hasNdefMessage()) // every tag won't have a message
    {

      NdefMessage message = tag.getNdefMessage();
      Serial.print("\nThis NFC Tag contains an NDEF Message with ");
      Serial.print(message.getRecordCount());
      Serial.print(" NDEF Record");
      if (message.getRecordCount() != 1) {
        Serial.print("s");
      }
      Serial.println(".");

      // cycle through the records, printing some info from each
      int recordCount = message.getRecordCount();
      for (int i = 0; i < recordCount; i++)
      {
        Serial.print("\nNDEF Record ");Serial.println(i+1);
        NdefRecord record = message.getRecord(i);
        // NdefRecord record = message[i]; // alternate syntax

        Serial.print("  Type: ");Serial.println(record.getType()); // will be "" for TNF_EMPTY

        // The TNF and Type should be used to determine how your application processes the payload
        // There's no generic processing for the payload, it's returned as a byte[]
        int payloadLength = record.getPayloadLength();
        byte payload[payloadLength];
        record.getPayload(payload);

        // Force the data into a String (might work depending on the content)
        // Real code should use smarter processing
        String payloadAsString = "";
        for (int c = 0; c < payloadLength; c++) {
          payloadAsString += (char)payload[c];
        }
        Serial.print("  Payload (as String): ");
        Serial.println(payloadAsString);
        
        //###########################################################################

        
        int stringHeader = payloadAsString.indexOf(header);
        int stringTerminator = payloadAsString.indexOf(terminator);
       
        if (stringHeader == 0)
        {
          Serial.println("  Header found");
          if (stringTerminator != -1)
          {
            Serial.println("  Terminator found");
            blink();
            String password = payloadAsString.substring(stringHeader + 4, stringTerminator);
            int passLength = password.length();
            String partOne = password.substring(0, passLength/4);
            String partTwo = password.substring(passLength/4, passLength/2);
            String partThree = password.substring(passLength/2, passLength/4*3);
            String partFour = password.substring(passLength/4*3);
            // Print the password in sequence to avoid skipping letters over bluetooth
            bleKeyboard.print(partOne);
            delay(100);
            bleKeyboard.print(partTwo);
            delay(100);
            bleKeyboard.print(partThree);
            delay(100);
            bleKeyboard.print(partFour);
            delay(400);
            bleKeyboard.write(KEY_RETURN);
            delay(100);
            Serial.print("  Password: ");
            Serial.println(password);
            delay(2000);
            
          }
        }
        //#############################################################################
        // id is probably blank and will return ""
        String uid = record.getId();
        if (uid != "") {
          Serial.print("  ID: ");Serial.println(uid);
          
        }
        
      }
    }
    else
    {
       // Print UID instead of password
       bleKeyboard.print(tag.getUidString());
       delay(200);
       bleKeyboard.write(KEY_RETURN);
       delay(2000);
    }
    delay(1000);
  }
  
  delay(30);
}
